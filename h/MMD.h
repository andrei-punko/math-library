
/*
------------------------------------------------------------------------------------------------
	File:		MMD.h
	Version:	1.01
	DLM:		28.06.2005

	Цель:		реализация мМД
	Описание:

	Класс CLattice дает возможность исследовать методом молекулярной динамики поведение системы N частиц.
	Закон взаимодействия частиц задается парным потенциалом V = V(r). Полная энергия системы предполагается постоянной.

	Параметры конструктора:
							L		ребро куба,
							m_1		масса одной частицы,
							T		температура,
							V		парный потенциал,
							dV_dr	производная потенциала по r (для ускорения вычислений)
//---
	После создания объекта класса должна быть вызвана одна из функций Init... в соответствии с типом выбранной решетки:

		InitAmorph(N_v)		решетка аморфного вещества; частицы размещаются в кубе случайным образом с постоянной плотностью
		InitVCC(a)			ОЦК решетка
							[ здесь N_v - концентрация частиц вещества, a - параметр ОЦК решетки ]
	
	Внутри каждой из этих функций вызывается private функция Init(),определяя начальное распределение скоростей
	максвелловским, соответствующим температуре Т

	ДОРАБОТАТЬ:		после нормировки Vц.м.= 0 что-то не совсем хорошее со скоростями (может не прав?), поэтому
	РЕКОМЕНДУЕТСЯ:	после вызова одной из ф-й Init... вызывать Freeze() [ обнуление скорстей ]

	После вызова Init... при помощи ф. getN() может быть получено количество частиц N

//---

	Solve(dt, NSteps, fname, NPSteps):
	
	Моделирование проводится по алгоритму Верлета в скоростной форме; делается NSteps шагов длиной dt каждый.
	В ходе моделирования в файл fname сохраняется кинетическая, потенциальная и полная энергии.
	После NSteps шагов делается NPSteps шагов той же длины dt, в ходе которых рассчитывается давление на стенки куба с
	усреденением по ним всем. Результат возвращается Solve(). Если NPSteps =0, то Solve() =0.

//---

	SavePositions(fname), SaveVelocities(fname):

	В любой момент могут быть сохранены координаты и скорости частиц, хранящиеся в массивах XYZ,VXYZ

//---

	SaveKr(precision, fname):

	Сохранение корелляционной функции в fname, где precision указывает, какую часть L составляет шаг гистограммы:
	precision = (ширина столбика гистограммы)/L; 0 < precision < 1

//---

  ! ДЛЯ УСКОРЕНИЯ ВЫЧИСЛЕНИЙ:
	
	1.В закрытую часть класса введена переменная L_2, содержащая половину стороны куба.

	2.В конструктор передается производная потенциала V, необходимая для вычисления проекций сил на координатные оси,
		для избежания постоянного дифференцирования потенциала V.

	3.При вычислении сил взаимодействия частиц, для избежания повтороного расчета расстояний между ними,
		заодно рассчитывается потенциальная энергия системы U.

  ! ПРИМЕЧАНИЕ: слишком большой временной шаг dt может привести к величине смещения, большей L_2; это отслеживается
				в Solve(); в случае нарушения условия программа терминируется с сообщением о чересчур большом dt

------------------------------------------------------------------------------------------------
*/

#ifndef MMD_H
#define MMD_H

#include "Engine.h"		//Описание класса CMatrix

class CLattice
{
public:
	CLattice(double L, double m_1, double T, double (*V)(double), double (*dV_dr)(double))
		:L(L), L_2(L/2.), m_1(m_1), T(T), V(V), dV_dr(dV_dr) {};
	~CLattice();

	void InitAmorph(double N_v);
	void InitVCC(double a);

	double Solve(double dt, int NSteps, char *fname, int NPSteps =0);	//	Расчет состояния системы в течение
											//	NSteps шагов длиной dt каждый. В ходе исследования в файл сохраняются
											//	кинетическая, потенциальная и полная энергии

	void SavePositions(char *fname);				//Сохранение координат частиц
	void SaveVelocities(char *fname);				//Сохранение скоростей частиц
	void SaveKr(double precision, char *fname);		//Сохранение корелляционной функции взаимного расположения частиц
	void Freeze();									//Обнуление скоростей частиц

	int getN() { return N; };

private:
	CMatrix	*XYZ,*VXYZ;	//Координаты и скорости частиц на текущем шаге
	int N;				//Количество частиц
	double
		L,L_2,			//Ребро куба и его половина
		m_1,			//Масса частицы
		U,				//Потенциальная энергия системы	(переделать?)
		T,				//Начальная температура
					
		(*V)(double),		//Парный потенциал
		(*dV_dr)(double);	//Его производная
	
	void CalcF_i(CMatrix &M);		//Расчет для каждой частицы компонент сил, действующих на нее со стороны всех остальных частиц
	double getE_k();				//Кинетическая энергия системы сейчас
	void CheckBounds(double &d);	//Проверка соотвествеия d диапазону [-L_2;L_2]
	void Init();					//Выделение памяти под координаты и скорости; определение начальных скоростей (Максвелл)
};

#endif
